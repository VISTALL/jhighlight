/* The following code was generated by JFlex 1.4.3 on 28.06.12 13:43 */

/*
 * Copyright 2000-2006 Omnicore Software, Hans Kratz & Dennis Strein GbR,
 *                     Geert Bevin <gbevin[remove] at uwyn dot com>.
 * Distributed under the terms of either:
 * - the common development and distribution license (CDDL), v1.0; or
 * - the GNU Lesser General Public License, v2.1 or later
 * $Id$
 */
package com.uwyn.jhighlight.highlighter;

import java.io.Reader;
import java.io.IOException;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 28.06.12 13:43 from the specification file
 * <tt>JavaHighlighter.flex</tt>
 */
public class JavaHighlighter implements ExplicitStateHighlighter {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 128;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int IN_COMMENT = 2;
  public static final int IN_JAVA_DOC_COMMENT = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\4\1\0\1\57\1\0\1\0\1\26\16\4\4\0\1\0\1\54"+
    "\1\30\1\0\1\2\1\54\1\54\1\25\1\53\1\53\1\55\1\24"+
    "\1\53\1\24\1\21\1\56\1\6\7\15\2\1\1\54\1\53\1\54"+
    "\1\54\1\54\1\54\1\60\3\14\1\17\1\23\1\17\5\5\1\10"+
    "\13\5\1\12\2\5\1\53\1\27\1\53\1\54\1\3\1\0\1\31"+
    "\1\32\1\13\1\20\1\22\1\16\1\51\1\37\1\42\1\2\1\36"+
    "\1\7\1\45\1\41\1\40\1\46\1\2\1\35\1\33\1\34\1\43"+
    "\1\47\1\50\1\11\1\44\1\52\1\53\1\54\1\53\1\54\41\4"+
    "\2\0\4\2\4\0\1\2\2\0\1\4\7\0\1\2\4\0\1\2"+
    "\5\0\27\2\1\0\37\2\1\0\u013f\2\31\0\162\2\4\0\14\2"+
    "\16\0\5\2\11\0\1\2\21\0\130\4\5\0\23\4\12\0\1\2"+
    "\13\0\1\2\1\0\3\2\1\0\1\2\1\0\24\2\1\0\54\2"+
    "\1\0\46\2\1\0\5\2\4\0\202\2\1\0\4\4\3\0\105\2"+
    "\1\0\46\2\2\0\2\2\6\0\20\2\41\0\46\2\2\0\1\2"+
    "\7\0\47\2\11\0\21\4\1\0\27\4\1\0\3\4\1\0\1\4"+
    "\1\0\2\4\1\0\1\4\13\0\33\2\5\0\3\2\15\0\4\4"+
    "\14\0\6\4\13\0\32\2\5\0\13\2\16\4\7\0\12\4\4\0"+
    "\2\2\1\4\143\2\1\0\1\2\10\4\1\0\6\4\2\2\2\4"+
    "\1\0\4\4\2\2\12\4\3\2\2\0\1\2\17\0\1\4\1\2"+
    "\1\4\36\2\33\4\2\0\3\2\60\0\46\2\13\4\1\2\u014f\0"+
    "\3\4\66\2\2\0\1\4\1\2\20\4\2\0\1\2\4\4\3\0"+
    "\12\2\2\4\2\0\12\4\21\0\3\4\1\0\10\2\2\0\2\2"+
    "\2\0\26\2\1\0\7\2\1\0\1\2\3\0\4\2\2\0\1\4"+
    "\1\2\7\4\2\0\2\4\2\0\3\4\11\0\1\4\4\0\2\2"+
    "\1\0\3\2\2\4\2\0\12\4\4\2\15\0\3\4\1\0\6\2"+
    "\4\0\2\2\2\0\26\2\1\0\7\2\1\0\2\2\1\0\2\2"+
    "\1\0\2\2\2\0\1\4\1\0\5\4\4\0\2\4\2\0\3\4"+
    "\13\0\4\2\1\0\1\2\7\0\14\4\3\2\14\0\3\4\1\0"+
    "\11\2\1\0\3\2\1\0\26\2\1\0\7\2\1\0\2\2\1\0"+
    "\5\2\2\0\1\4\1\2\10\4\1\0\3\4\1\0\3\4\2\0"+
    "\1\2\17\0\2\2\2\4\2\0\12\4\1\0\1\2\17\0\3\4"+
    "\1\0\10\2\2\0\2\2\2\0\26\2\1\0\7\2\1\0\2\2"+
    "\1\0\5\2\2\0\1\4\1\2\6\4\3\0\2\4\2\0\3\4"+
    "\10\0\2\4\4\0\2\2\1\0\3\2\4\0\12\4\1\0\1\2"+
    "\20\0\1\4\1\2\1\0\6\2\3\0\3\2\1\0\4\2\3\0"+
    "\2\2\1\0\1\2\1\0\2\2\3\0\2\2\3\0\3\2\3\0"+
    "\10\2\1\0\3\2\4\0\5\4\3\0\3\4\1\0\4\4\11\0"+
    "\1\4\17\0\11\4\11\0\1\2\7\0\3\4\1\0\10\2\1\0"+
    "\3\2\1\0\27\2\1\0\12\2\1\0\5\2\4\0\7\4\1\0"+
    "\3\4\1\0\4\4\7\0\2\4\11\0\2\2\4\0\12\4\22\0"+
    "\2\4\1\0\10\2\1\0\3\2\1\0\27\2\1\0\12\2\1\0"+
    "\5\2\2\0\1\4\1\2\7\4\1\0\3\4\1\0\4\4\7\0"+
    "\2\4\7\0\1\2\1\0\2\2\4\0\12\4\22\0\2\4\1\0"+
    "\10\2\1\0\3\2\1\0\27\2\1\0\20\2\4\0\6\4\2\0"+
    "\3\4\1\0\4\4\11\0\1\4\10\0\2\2\4\0\12\4\22\0"+
    "\2\4\1\0\22\2\3\0\30\2\1\0\11\2\1\0\1\2\2\0"+
    "\7\2\3\0\1\4\4\0\6\4\1\0\1\4\1\0\10\4\22\0"+
    "\2\4\15\0\60\2\1\4\2\2\7\4\4\0\10\2\10\4\1\0"+
    "\12\4\47\0\2\2\1\0\1\2\2\0\2\2\1\0\1\2\2\0"+
    "\1\2\6\0\4\2\1\0\7\2\1\0\3\2\1\0\1\2\1\0"+
    "\1\2\2\0\2\2\1\0\4\2\1\4\2\2\6\4\1\0\2\4"+
    "\1\2\2\0\5\2\1\0\1\2\1\0\6\4\2\0\12\4\2\0"+
    "\2\2\42\0\1\2\27\0\2\4\6\0\12\4\13\0\1\4\1\0"+
    "\1\4\1\0\1\4\4\0\2\4\10\2\1\0\42\2\6\0\24\4"+
    "\1\0\2\4\4\2\4\0\10\4\1\0\44\4\11\0\1\4\71\0"+
    "\42\2\1\0\5\2\1\0\2\2\1\0\7\4\3\0\4\4\6\0"+
    "\12\4\6\0\6\2\4\4\106\0\46\2\12\0\51\2\7\0\132\2"+
    "\5\0\104\2\5\0\122\2\6\0\7\2\1\0\77\2\1\0\1\2"+
    "\1\0\4\2\2\0\7\2\1\0\1\2\1\0\4\2\2\0\47\2"+
    "\1\0\1\2\1\0\4\2\2\0\37\2\1\0\1\2\1\0\4\2"+
    "\2\0\7\2\1\0\1\2\1\0\4\2\2\0\7\2\1\0\7\2"+
    "\1\0\27\2\1\0\37\2\1\0\1\2\1\0\4\2\2\0\7\2"+
    "\1\0\47\2\1\0\23\2\16\0\11\4\56\0\125\2\14\0\u026c\2"+
    "\2\0\10\2\12\0\32\2\5\0\113\2\3\0\3\2\17\0\15\2"+
    "\1\0\4\2\3\4\13\0\22\2\3\4\13\0\22\2\2\4\14\0"+
    "\15\2\1\0\3\2\1\0\2\4\14\0\64\2\40\4\3\0\1\2"+
    "\3\0\2\2\1\4\2\0\12\4\41\0\3\4\2\0\12\4\6\0"+
    "\130\2\10\0\51\2\1\4\126\0\35\2\3\0\14\4\4\0\14\4"+
    "\12\0\12\4\36\2\2\0\5\2\u038b\0\154\2\224\0\234\2\4\0"+
    "\132\2\6\0\26\2\2\0\6\2\2\0\46\2\2\0\6\2\2\0"+
    "\10\2\1\0\1\2\1\0\1\2\1\0\1\2\1\0\37\2\2\0"+
    "\65\2\1\0\7\2\1\0\1\2\3\0\3\2\1\0\7\2\3\0"+
    "\4\2\2\0\6\2\4\0\15\2\5\0\3\2\1\0\7\2\17\0"+
    "\4\4\32\0\5\4\20\0\2\2\23\0\1\2\13\0\4\4\6\0"+
    "\6\4\1\0\1\2\15\0\1\2\40\0\22\2\36\0\15\4\4\0"+
    "\1\4\3\0\6\4\27\0\1\2\4\0\1\2\2\0\12\2\1\0"+
    "\1\2\3\0\5\2\6\0\1\2\1\0\1\2\1\0\1\2\1\0"+
    "\4\2\1\0\3\2\1\0\7\2\3\0\3\2\5\0\5\2\26\0"+
    "\44\2\u0e81\0\3\2\31\0\11\2\6\4\1\0\5\2\2\0\5\2"+
    "\4\0\126\2\2\0\2\4\2\0\3\2\1\0\137\2\5\0\50\2"+
    "\4\0\136\2\21\0\30\2\70\0\20\2\u0200\0\u19b6\2\112\0\u51a6\2"+
    "\132\0\u048d\2\u0773\0\u2ba4\2\u215c\0\u012e\2\2\0\73\2\225\0\7\2"+
    "\14\0\5\2\5\0\1\2\1\4\12\2\1\0\15\2\1\0\5\2"+
    "\1\0\1\2\1\0\2\2\1\0\2\2\1\0\154\2\41\0\u016b\2"+
    "\22\0\100\2\2\0\66\2\50\0\15\2\3\0\20\4\20\0\4\4"+
    "\17\0\2\2\30\0\3\2\31\0\1\2\6\0\5\2\1\0\207\2"+
    "\2\0\1\4\4\0\1\2\13\0\12\4\7\0\32\2\4\0\1\2"+
    "\1\0\32\2\12\0\132\2\3\0\6\2\2\0\6\2\2\0\6\2"+
    "\2\0\3\2\3\0\2\2\3\0\2\2\22\0\3\4\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\2\1\1\2\4\1\1\3\1\1"+
    "\1\4\2\5\13\1\1\3\1\4\2\1\1\6\3\7"+
    "\1\1\3\2\1\0\1\1\1\10\4\2\12\1\1\11"+
    "\2\1\3\5\20\1\1\11\10\1\1\12\3\0\1\13"+
    "\1\14\1\15\1\2\1\0\1\2\37\1\1\10\11\1"+
    "\1\16\1\10\20\1\1\5\14\1\1\11\11\1\1\11"+
    "\12\1\1\17\25\1";

  private static int [] zzUnpackAction() {
    int [] result = new int[213];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\61\0\142\0\223\0\304\0\365\0\u0126\0\u0157"+
    "\0\u0188\0\u01b9\0\u01ea\0\u021b\0\u024c\0\u027d\0\223\0\u02ae"+
    "\0\u02df\0\u0310\0\u0341\0\u0372\0\u03a3\0\u03d4\0\u0405\0\u0436"+
    "\0\u0467\0\u0498\0\u04c9\0\u04fa\0\223\0\u052b\0\u055c\0\u058d"+
    "\0\223\0\223\0\u05be\0\u05ef\0\u0620\0\223\0\u0620\0\u0651"+
    "\0\u0682\0\u06b3\0\u06e4\0\u0715\0\u0746\0\u0777\0\u07a8\0\u07d9"+
    "\0\u080a\0\u083b\0\u086c\0\u089d\0\u08ce\0\u08ff\0\u0930\0\u0961"+
    "\0\u0992\0\u09c3\0\u09f4\0\u0a25\0\223\0\u0a56\0\u0a87\0\u0ab8"+
    "\0\u0ae9\0\u0b1a\0\u0b4b\0\u0b7c\0\u0bad\0\u0bde\0\u0c0f\0\u0c40"+
    "\0\u0c71\0\u0ca2\0\u0cd3\0\u0d04\0\u0d35\0\u0d66\0\u0d97\0\365"+
    "\0\u0dc8\0\u0df9\0\u0e2a\0\u0e5b\0\u0e8c\0\u0ebd\0\u0eee\0\u0f1f"+
    "\0\u0f50\0\u0f81\0\u055c\0\u058d\0\223\0\223\0\u0fb2\0\u0fe3"+
    "\0\u1014\0\u1045\0\u1076\0\u10a7\0\u10d8\0\u1109\0\u113a\0\u116b"+
    "\0\u119c\0\u11cd\0\u11fe\0\u122f\0\u1260\0\u1291\0\u12c2\0\u12f3"+
    "\0\u1324\0\u1355\0\u1386\0\u13b7\0\u13e8\0\u1419\0\u144a\0\u147b"+
    "\0\u14ac\0\u14dd\0\u150e\0\u153f\0\u1570\0\u15a1\0\u15d2\0\u1603"+
    "\0\u1634\0\u1665\0\u1696\0\u16c7\0\u16f8\0\u1729\0\u175a\0\u178b"+
    "\0\u17bc\0\u17ed\0\u181e\0\u184f\0\365\0\u1880\0\u18b1\0\u18e2"+
    "\0\u1913\0\u1944\0\u1975\0\u19a6\0\u19d7\0\u1a08\0\u1a39\0\u1a6a"+
    "\0\u1a9b\0\u1acc\0\u1afd\0\u1b2e\0\u1b5f\0\365\0\u1b90\0\u1bc1"+
    "\0\u1bf2\0\u1c23\0\u1c54\0\u1c85\0\u1cb6\0\u1ce7\0\u1d18\0\u1d49"+
    "\0\u1d7a\0\u1dab\0\u1ddc\0\u1e0d\0\u1e3e\0\u1e6f\0\u1ea0\0\u1ed1"+
    "\0\u1f02\0\u1f33\0\u1f64\0\u1f95\0\u1570\0\u1fc6\0\u1ff7\0\u2028"+
    "\0\u2059\0\u208a\0\u20bb\0\u20ec\0\u211d\0\u214e\0\u217f\0\365"+
    "\0\u21b0\0\u21e1\0\u2212\0\u2243\0\u2274\0\u22a5\0\u22d6\0\u2307"+
    "\0\u2338\0\u2369\0\u239a\0\u23cb\0\u23fc\0\u242d\0\u245e\0\u248f"+
    "\0\u24c0\0\u24f1\0\u2522\0\u2553\0\u2584";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[213];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\2\6\1\4\1\7\1\10\1\11\1\7"+
    "\1\6\1\7\1\12\1\7\1\5\1\13\1\7\1\14"+
    "\1\15\1\16\1\7\1\17\1\20\2\4\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\3\6\1\27\1\30\3\6"+
    "\1\31\1\32\1\33\1\34\1\6\1\35\2\17\1\36"+
    "\2\4\55\37\1\40\1\37\1\41\1\37\55\42\1\43"+
    "\2\42\1\44\62\0\1\5\1\0\1\45\1\0\1\45"+
    "\1\5\1\46\1\47\1\0\1\45\1\0\1\45\1\5"+
    "\1\46\1\47\1\46\1\50\1\51\1\52\36\0\20\6"+
    "\1\0\2\6\5\0\22\6\7\0\1\7\1\53\1\7"+
    "\1\53\2\7\1\53\1\7\1\53\1\7\1\53\2\7"+
    "\1\53\1\7\1\53\1\0\1\53\1\7\5\0\22\53"+
    "\7\0\1\54\1\0\1\45\1\0\1\45\1\55\1\46"+
    "\1\47\1\56\1\57\1\0\1\45\1\55\1\46\1\47"+
    "\1\46\1\50\1\51\1\52\36\0\20\6\1\0\2\6"+
    "\5\0\7\6\1\60\12\6\7\0\6\6\1\61\11\6"+
    "\1\0\2\6\5\0\1\62\5\6\1\63\1\64\12\6"+
    "\7\0\6\6\1\65\11\6\1\0\2\6\5\0\1\66"+
    "\6\6\1\67\1\6\1\70\10\6\7\0\20\6\1\0"+
    "\1\71\1\6\5\0\7\6\1\72\12\6\7\0\1\50"+
    "\4\0\1\50\6\0\1\50\44\0\6\6\1\73\1\6"+
    "\1\74\7\6\1\0\2\6\5\0\22\6\6\0\25\20"+
    "\1\75\1\0\1\76\27\20\1\0\1\20\26\21\1\0"+
    "\1\77\1\75\26\21\1\0\1\21\1\0\20\6\1\0"+
    "\2\6\5\0\1\6\1\100\1\101\17\6\7\0\20\6"+
    "\1\0\2\6\5\0\4\6\1\102\2\6\1\103\3\6"+
    "\1\104\6\6\7\0\20\6\1\0\2\6\5\0\3\6"+
    "\1\105\2\6\1\106\3\6\1\107\1\110\3\6\1\111"+
    "\2\6\7\0\20\6\1\0\2\6\5\0\4\6\1\112"+
    "\1\6\1\113\13\6\7\0\20\6\1\0\1\114\1\6"+
    "\5\0\22\6\7\0\20\6\1\0\1\115\1\6\5\0"+
    "\1\116\11\6\1\117\7\6\7\0\15\6\1\120\2\6"+
    "\1\0\2\6\5\0\10\6\1\121\3\6\1\122\5\6"+
    "\7\0\20\6\1\0\2\6\5\0\1\123\3\6\1\124"+
    "\5\6\1\125\7\6\7\0\20\6\1\0\2\6\5\0"+
    "\7\6\1\126\12\6\7\0\20\6\1\0\2\6\5\0"+
    "\6\6\1\127\13\6\7\0\20\6\1\0\2\6\5\0"+
    "\7\6\1\130\12\6\63\0\1\131\1\132\2\0\55\133"+
    "\1\134\1\133\1\41\56\133\1\134\1\135\1\41\1\133"+
    "\56\0\1\136\4\0\2\137\1\0\1\137\1\0\6\137"+
    "\1\0\3\137\1\0\2\137\5\0\22\137\7\0\1\45"+
    "\1\0\1\45\1\0\2\45\1\0\1\45\1\0\1\45"+
    "\1\0\2\45\1\0\1\45\3\0\1\45\36\0\1\50"+
    "\4\0\1\50\6\0\1\50\3\46\1\0\2\51\36\0"+
    "\1\140\4\0\1\140\6\0\1\140\6\0\1\141\35\0"+
    "\1\142\1\0\1\45\1\0\1\45\1\142\1\0\1\45"+
    "\1\0\1\45\1\0\1\45\1\142\1\0\1\45\3\0"+
    "\1\45\1\141\35\0\20\53\1\0\2\53\5\0\22\53"+
    "\7\0\1\54\1\0\1\45\1\0\1\45\1\54\1\0"+
    "\1\45\1\0\1\45\1\0\1\45\1\54\1\46\1\47"+
    "\1\46\1\50\1\51\1\52\36\0\1\54\1\0\1\45"+
    "\1\0\1\45\1\55\1\46\1\47\1\0\1\45\1\0"+
    "\1\45\1\55\1\46\1\47\1\46\1\50\1\51\1\52"+
    "\36\0\1\56\4\0\1\56\2\46\2\0\6\56\1\0"+
    "\2\56\5\0\2\56\27\0\1\57\1\0\1\45\1\0"+
    "\1\45\1\57\1\46\1\47\1\0\1\45\1\56\2\57"+
    "\1\56\1\57\1\56\1\0\1\56\1\57\5\0\2\56"+
    "\27\0\20\6\1\0\2\6\5\0\10\6\1\143\11\6"+
    "\7\0\20\6\1\0\2\6\5\0\1\144\21\6\7\0"+
    "\20\6\1\0\2\6\5\0\2\6\1\145\1\146\16\6"+
    "\7\0\20\6\1\0\2\6\5\0\1\147\21\6\7\0"+
    "\20\6\1\0\2\6\5\0\10\6\1\150\11\6\7\0"+
    "\20\6\1\0\2\6\5\0\7\6\1\151\12\6\7\0"+
    "\6\6\1\152\11\6\1\0\2\6\5\0\22\6\7\0"+
    "\20\6\1\0\2\6\5\0\4\6\1\120\15\6\7\0"+
    "\20\6\1\0\2\6\5\0\10\6\1\153\11\6\7\0"+
    "\15\6\1\154\2\6\1\0\2\6\5\0\22\6\7\0"+
    "\20\6\1\0\2\6\5\0\12\6\1\155\7\6\7\0"+
    "\20\6\1\0\2\6\5\0\2\6\1\145\17\6\7\0"+
    "\20\6\1\0\2\6\5\0\3\6\1\156\16\6\6\0"+
    "\26\20\1\0\30\20\1\0\1\20\26\21\1\0\30\21"+
    "\1\0\1\21\1\0\20\6\1\0\2\6\5\0\2\6"+
    "\1\157\17\6\7\0\20\6\1\0\2\6\5\0\2\6"+
    "\1\160\17\6\7\0\20\6\1\0\1\161\1\6\5\0"+
    "\22\6\7\0\20\6\1\0\2\6\5\0\7\6\1\162"+
    "\12\6\7\0\20\6\1\0\2\6\5\0\3\6\1\163"+
    "\16\6\7\0\20\6\1\0\2\6\5\0\1\164\3\6"+
    "\1\165\15\6\7\0\20\6\1\0\2\6\5\0\7\6"+
    "\1\166\12\6\7\0\20\6\1\0\2\6\5\0\15\6"+
    "\1\167\4\6\7\0\20\6\1\0\2\6\5\0\10\6"+
    "\1\170\11\6\7\0\20\6\1\0\2\6\5\0\11\6"+
    "\1\171\10\6\7\0\20\6\1\0\2\6\5\0\1\172"+
    "\11\6\1\173\1\120\6\6\7\0\20\6\1\0\2\6"+
    "\5\0\4\6\1\174\4\6\1\175\10\6\7\0\20\6"+
    "\1\0\2\6\5\0\3\6\1\176\16\6\7\0\20\6"+
    "\1\0\2\6\5\0\17\6\1\120\2\6\7\0\20\6"+
    "\1\0\2\6\5\0\3\6\1\177\16\6\7\0\6\6"+
    "\1\200\11\6\1\0\2\6\5\0\22\6\7\0\20\6"+
    "\1\0\2\6\5\0\2\6\1\201\1\202\16\6\7\0"+
    "\20\6\1\0\2\6\5\0\15\6\1\203\4\6\7\0"+
    "\12\6\1\204\5\6\1\0\2\6\5\0\22\6\7\0"+
    "\20\6\1\0\2\6\5\0\7\6\1\205\1\6\1\206"+
    "\10\6\7\0\20\6\1\0\2\6\5\0\1\6\1\207"+
    "\20\6\7\0\6\6\1\210\11\6\1\0\2\6\5\0"+
    "\11\6\1\211\10\6\7\0\20\6\1\0\2\6\5\0"+
    "\11\6\1\212\10\6\7\0\20\6\1\0\2\6\5\0"+
    "\3\6\1\213\16\6\63\0\1\214\3\0\57\132\1\41"+
    "\1\132\1\0\20\137\1\0\2\137\5\0\22\137\7\0"+
    "\1\140\4\0\1\140\6\0\1\140\3\46\41\0\1\140"+
    "\4\0\1\140\6\0\1\140\44\0\1\142\1\0\1\45"+
    "\1\0\1\45\1\142\1\0\1\45\1\0\1\45\1\0"+
    "\1\45\1\142\1\46\1\47\1\46\2\0\1\45\36\0"+
    "\20\6\1\0\2\6\5\0\20\6\1\215\1\6\7\0"+
    "\20\6\1\0\2\6\5\0\2\6\1\175\17\6\7\0"+
    "\20\6\1\0\1\120\1\6\5\0\22\6\7\0\12\6"+
    "\1\216\5\6\1\0\2\6\5\0\22\6\7\0\20\6"+
    "\1\0\2\6\5\0\4\6\1\215\15\6\7\0\20\6"+
    "\1\0\2\6\5\0\2\6\1\217\1\220\16\6\7\0"+
    "\20\6\1\0\2\6\5\0\1\221\21\6\7\0\20\6"+
    "\1\0\2\6\5\0\2\6\1\173\17\6\7\0\20\6"+
    "\1\0\2\6\5\0\1\222\21\6\7\0\20\6\1\0"+
    "\2\6\5\0\1\223\21\6\7\0\20\6\1\0\2\6"+
    "\5\0\1\6\1\224\20\6\7\0\20\6\1\0\1\225"+
    "\1\6\5\0\22\6\7\0\20\6\1\0\2\6\5\0"+
    "\3\6\1\226\16\6\7\0\20\6\1\0\1\227\1\6"+
    "\5\0\22\6\7\0\20\6\1\0\2\6\5\0\1\230"+
    "\21\6\7\0\6\6\1\231\11\6\1\0\2\6\5\0"+
    "\22\6\7\0\20\6\1\0\1\215\1\6\5\0\22\6"+
    "\7\0\20\6\1\0\2\6\5\0\3\6\1\232\16\6"+
    "\7\0\20\6\1\0\2\6\5\0\11\6\1\233\10\6"+
    "\7\0\20\6\1\0\2\6\5\0\4\6\1\221\15\6"+
    "\7\0\20\6\1\0\1\67\1\6\5\0\22\6\7\0"+
    "\12\6\1\234\5\6\1\0\2\6\5\0\22\6\7\0"+
    "\20\6\1\0\2\6\5\0\3\6\1\146\16\6\7\0"+
    "\20\6\1\0\2\6\5\0\10\6\1\235\11\6\7\0"+
    "\20\6\1\0\1\236\1\6\5\0\22\6\7\0\20\6"+
    "\1\0\2\6\5\0\7\6\1\237\12\6\7\0\20\6"+
    "\1\0\2\6\5\0\2\6\1\120\17\6\7\0\20\6"+
    "\1\0\2\6\5\0\12\6\1\240\7\6\7\0\20\6"+
    "\1\0\2\6\5\0\11\6\1\241\10\6\7\0\6\6"+
    "\1\236\11\6\1\0\2\6\5\0\22\6\7\0\20\6"+
    "\1\0\2\6\5\0\3\6\1\242\16\6\7\0\20\6"+
    "\1\0\1\243\1\6\5\0\22\6\7\0\6\6\1\244"+
    "\11\6\1\0\2\6\5\0\7\6\1\245\12\6\7\0"+
    "\20\6\1\0\2\6\5\0\5\6\1\246\14\6\7\0"+
    "\20\6\1\0\2\6\5\0\3\6\1\247\16\6\7\0"+
    "\20\6\1\0\2\6\5\0\16\6\1\250\3\6\7\0"+
    "\6\6\1\232\11\6\1\0\2\6\5\0\22\6\7\0"+
    "\20\6\1\0\2\6\5\0\1\251\21\6\7\0\17\6"+
    "\1\215\1\0\2\6\5\0\22\6\7\0\6\6\1\145"+
    "\11\6\1\0\2\6\5\0\22\6\7\0\20\6\1\0"+
    "\2\6\5\0\7\6\1\120\12\6\64\0\1\41\3\0"+
    "\20\6\1\0\2\6\5\0\6\6\1\120\13\6\7\0"+
    "\20\6\1\0\2\6\5\0\3\6\1\120\16\6\7\0"+
    "\20\6\1\0\2\6\5\0\11\6\1\252\10\6\7\0"+
    "\20\6\1\0\2\6\5\0\3\6\1\215\16\6\7\0"+
    "\6\6\1\253\11\6\1\0\2\6\5\0\22\6\7\0"+
    "\20\6\1\0\2\6\5\0\12\6\1\254\7\6\7\0"+
    "\6\6\1\163\11\6\1\0\2\6\5\0\22\6\7\0"+
    "\20\6\1\0\2\6\5\0\10\6\1\255\11\6\7\0"+
    "\20\6\1\0\2\6\5\0\4\6\1\256\15\6\7\0"+
    "\20\6\1\0\2\6\5\0\4\6\1\257\15\6\7\0"+
    "\20\6\1\0\2\6\5\0\5\6\1\120\14\6\7\0"+
    "\20\6\1\0\1\260\1\6\5\0\22\6\7\0\20\6"+
    "\1\0\2\6\5\0\11\6\1\261\10\6\7\0\12\6"+
    "\1\262\5\6\1\0\2\6\5\0\22\6\7\0\20\6"+
    "\1\0\2\6\5\0\6\6\1\263\13\6\7\0\20\6"+
    "\1\0\2\6\5\0\2\6\1\264\17\6\7\0\20\6"+
    "\1\0\2\6\5\0\17\6\1\265\2\6\7\0\20\6"+
    "\1\0\2\6\5\0\4\6\1\266\15\6\7\0\20\6"+
    "\1\0\2\6\5\0\16\6\1\145\3\6\7\0\20\6"+
    "\1\0\2\6\5\0\1\267\21\6\7\0\20\6\1\0"+
    "\2\6\5\0\4\6\1\270\15\6\7\0\20\6\1\0"+
    "\1\271\1\6\5\0\22\6\7\0\20\6\1\0\2\6"+
    "\5\0\4\6\1\217\15\6\7\0\20\6\1\0\2\6"+
    "\5\0\1\272\21\6\7\0\20\6\1\0\1\273\1\6"+
    "\5\0\22\6\7\0\20\6\1\0\2\6\5\0\1\274"+
    "\21\6\7\0\20\6\1\0\2\6\5\0\3\6\1\127"+
    "\16\6\7\0\20\6\1\0\2\6\5\0\10\6\1\275"+
    "\11\6\7\0\6\6\1\276\11\6\1\0\2\6\5\0"+
    "\22\6\7\0\6\6\1\217\11\6\1\0\2\6\5\0"+
    "\22\6\7\0\17\6\1\175\1\0\2\6\5\0\22\6"+
    "\7\0\20\6\1\0\2\6\5\0\1\277\21\6\7\0"+
    "\20\6\1\0\2\6\5\0\3\6\1\300\16\6\7\0"+
    "\20\6\1\0\2\6\5\0\1\301\21\6\7\0\12\6"+
    "\1\120\5\6\1\0\2\6\5\0\22\6\7\0\20\6"+
    "\1\0\2\6\5\0\3\6\1\302\16\6\7\0\20\6"+
    "\1\0\2\6\5\0\4\6\1\303\15\6\7\0\20\6"+
    "\1\0\2\6\5\0\11\6\1\304\10\6\7\0\20\6"+
    "\1\0\2\6\5\0\10\6\1\120\11\6\7\0\20\6"+
    "\1\0\2\6\5\0\10\6\1\305\11\6\7\0\15\6"+
    "\1\306\2\6\1\0\2\6\5\0\22\6\7\0\20\6"+
    "\1\0\2\6\5\0\14\6\1\307\5\6\7\0\20\6"+
    "\1\0\2\6\5\0\20\6\1\145\1\6\7\0\12\6"+
    "\1\310\5\6\1\0\2\6\5\0\22\6\7\0\20\6"+
    "\1\0\2\6\5\0\3\6\1\145\16\6\7\0\20\6"+
    "\1\0\2\6\5\0\12\6\1\145\7\6\7\0\20\6"+
    "\1\0\2\6\5\0\13\6\1\120\6\6\7\0\12\6"+
    "\1\217\5\6\1\0\2\6\5\0\22\6\7\0\20\6"+
    "\1\0\2\6\5\0\10\6\1\215\11\6\7\0\15\6"+
    "\1\311\2\6\1\0\2\6\5\0\22\6\7\0\20\6"+
    "\1\0\2\6\5\0\7\6\1\312\12\6\7\0\20\6"+
    "\1\0\1\313\1\6\5\0\22\6\7\0\12\6\1\314"+
    "\5\6\1\0\2\6\5\0\22\6\7\0\20\6\1\0"+
    "\2\6\5\0\1\315\21\6\7\0\20\6\1\0\1\316"+
    "\1\6\5\0\22\6\7\0\20\6\1\0\2\6\5\0"+
    "\3\6\1\317\16\6\7\0\20\6\1\0\2\6\5\0"+
    "\15\6\1\120\4\6\7\0\20\6\1\0\2\6\5\0"+
    "\10\6\1\320\11\6\7\0\20\6\1\0\2\6\5\0"+
    "\10\6\1\217\11\6\7\0\20\6\1\0\1\321\1\6"+
    "\5\0\22\6\7\0\12\6\1\145\5\6\1\0\2\6"+
    "\5\0\22\6\7\0\20\6\1\0\2\6\5\0\10\6"+
    "\1\322\11\6\7\0\20\6\1\0\1\323\1\6\5\0"+
    "\22\6\7\0\20\6\1\0\2\6\5\0\11\6\1\324"+
    "\10\6\7\0\20\6\1\0\2\6\5\0\7\6\1\325"+
    "\12\6\7\0\20\6\1\0\2\6\5\0\3\6\1\175"+
    "\16\6\7\0\17\6\1\120\1\0\2\6\5\0\22\6"+
    "\7\0\20\6\1\0\2\6\5\0\21\6\1\317\7\0"+
    "\15\6\1\120\2\6\1\0\2\6\5\0\22\6\6\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9653];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\12\1\1\11\15\1\1\11\3\1\2\11"+
    "\3\1\1\11\2\1\1\0\23\1\1\11\34\1\3\0"+
    "\2\11\2\1\1\0\164\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[213];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
	public static boolean ASSERT_IS_KEYWORD = false;

	/* styles */
	
	public static final byte STRING_STYLE = 0;
	public static final byte PLAIN_STYLE = 1;
	public static final byte KEYWORD_STYLE = 2;
	public static final byte TYPE_STYLE = 3;
	public static final byte OPERATOR_STYLE = 4;
	public static final byte SEPARATOR_STYLE = 5;
	public static final byte LITERAL_STYLE = 6;
	public static final byte JAVA_COMMENT_STYLE = 7;
	public static final byte JAVADOC_COMMENT_STYLE = 8;
	public static final byte JAVADOC_TAG_STYLE = 9;
	
	/* Highlighter implementation */
	
	public int getStyleCount()
	{
		return 9;
	}
	
	public byte getStartState()
	{
		return YYINITIAL+1;
	}
	
	public byte getCurrentState()
	{
		return (byte) (yystate()+1);
	}
	
	public void setState(byte newState)
	{
		yybegin(newState-1);
	}
	
	public byte getNextToken()
	throws IOException
	{
		return (byte) yylex();
	}
	
	public int getTokenLength()
	{
		return yylength();
	}
	
	public void setReader(Reader r)
	{
		this.zzReader = r;
	}

	public JavaHighlighter()
	{
	}


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public JavaHighlighter(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public JavaHighlighter(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1778) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 15: 
          { return ASSERT_IS_KEYWORD ? KEYWORD_STYLE : PLAIN_STYLE;
          }
        case 16: break;
        case 6: 
          { return JAVA_COMMENT_STYLE;
          }
        case 17: break;
        case 1: 
          { return PLAIN_STYLE;
          }
        case 18: break;
        case 9: 
          { return KEYWORD_STYLE;
          }
        case 19: break;
        case 4: 
          { return OPERATOR_STYLE;
          }
        case 20: break;
        case 2: 
          { return LITERAL_STYLE;
          }
        case 21: break;
        case 5: 
          { return STRING_STYLE;
          }
        case 22: break;
        case 12: 
          { yybegin(YYINITIAL); return JAVADOC_COMMENT_STYLE;
          }
        case 23: break;
        case 11: 
          { yybegin(YYINITIAL); return JAVA_COMMENT_STYLE;
          }
        case 24: break;
        case 3: 
          { return SEPARATOR_STYLE;
          }
        case 25: break;
        case 8: 
          { return TYPE_STYLE;
          }
        case 26: break;
        case 10: 
          { yybegin(IN_COMMENT);  return JAVA_COMMENT_STYLE;
          }
        case 27: break;
        case 14: 
          { yybegin(IN_JAVA_DOC_COMMENT); return JAVADOC_COMMENT_STYLE;
          }
        case 28: break;
        case 13: 
          { return JAVADOC_TAG_STYLE;
          }
        case 29: break;
        case 7: 
          { return JAVADOC_COMMENT_STYLE;
          }
        case 30: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return YYEOF;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
