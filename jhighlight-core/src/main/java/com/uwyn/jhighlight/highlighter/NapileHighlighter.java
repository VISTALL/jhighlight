/* The following code was generated by JFlex 1.4.3 on 28.06.12 13:46 */

/*
 * Copyright 2000-2006 Omnicore Software, Hans Kratz & Dennis Strein GbR,
 *                     Geert Bevin <gbevin[remove] at uwyn dot com>.
 * Distributed under the terms of either:
 * - the common development and distribution license (CDDL), v1.0; or
 * - the GNU Lesser General Public License, v2.1 or later
 *
 * Modified by VISTALL
 */
package com.uwyn.jhighlight.highlighter;

import java.io.Reader;
import java.io.IOException;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 28.06.12 13:46 from the specification file
 * <tt>NapileHighlighter.flex</tt>
 */
public class NapileHighlighter implements ExplicitStateHighlighter {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 128;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int IN_COMMENT = 2;
  public static final int IN_JAVA_DOC_COMMENT = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\4\1\0\1\53\1\0\1\0\1\17\16\4\4\0\1\0\1\50"+
    "\1\21\1\47\1\2\1\50\1\50\1\16\1\47\1\47\1\51\1\15"+
    "\1\47\1\15\1\12\1\52\1\5\7\1\2\1\1\50\1\47\1\50"+
    "\1\50\1\50\1\50\1\54\4\11\1\14\1\11\21\3\1\7\2\3"+
    "\1\47\1\20\1\47\1\50\1\3\1\0\1\22\1\23\1\27\1\41"+
    "\1\13\1\10\1\46\1\33\1\36\1\2\1\32\1\34\1\42\1\30"+
    "\1\35\1\43\1\2\1\26\1\24\1\25\1\37\1\40\1\44\1\6"+
    "\1\31\1\45\1\47\1\50\1\47\1\50\41\4\2\0\4\2\4\0"+
    "\1\2\2\0\1\4\7\0\1\2\4\0\1\2\5\0\27\2\1\0"+
    "\37\2\1\0\u013f\2\31\0\162\2\4\0\14\2\16\0\5\2\11\0"+
    "\1\2\21\0\130\4\5\0\23\4\12\0\1\2\13\0\1\2\1\0"+
    "\3\2\1\0\1\2\1\0\24\2\1\0\54\2\1\0\46\2\1\0"+
    "\5\2\4\0\202\2\1\0\4\4\3\0\105\2\1\0\46\2\2\0"+
    "\2\2\6\0\20\2\41\0\46\2\2\0\1\2\7\0\47\2\11\0"+
    "\21\4\1\0\27\4\1\0\3\4\1\0\1\4\1\0\2\4\1\0"+
    "\1\4\13\0\33\2\5\0\3\2\15\0\4\4\14\0\6\4\13\0"+
    "\32\2\5\0\13\2\16\4\7\0\12\4\4\0\2\2\1\4\143\2"+
    "\1\0\1\2\10\4\1\0\6\4\2\2\2\4\1\0\4\4\2\2"+
    "\12\4\3\2\2\0\1\2\17\0\1\4\1\2\1\4\36\2\33\4"+
    "\2\0\3\2\60\0\46\2\13\4\1\2\u014f\0\3\4\66\2\2\0"+
    "\1\4\1\2\20\4\2\0\1\2\4\4\3\0\12\2\2\4\2\0"+
    "\12\4\21\0\3\4\1\0\10\2\2\0\2\2\2\0\26\2\1\0"+
    "\7\2\1\0\1\2\3\0\4\2\2\0\1\4\1\2\7\4\2\0"+
    "\2\4\2\0\3\4\11\0\1\4\4\0\2\2\1\0\3\2\2\4"+
    "\2\0\12\4\4\2\15\0\3\4\1\0\6\2\4\0\2\2\2\0"+
    "\26\2\1\0\7\2\1\0\2\2\1\0\2\2\1\0\2\2\2\0"+
    "\1\4\1\0\5\4\4\0\2\4\2\0\3\4\13\0\4\2\1\0"+
    "\1\2\7\0\14\4\3\2\14\0\3\4\1\0\11\2\1\0\3\2"+
    "\1\0\26\2\1\0\7\2\1\0\2\2\1\0\5\2\2\0\1\4"+
    "\1\2\10\4\1\0\3\4\1\0\3\4\2\0\1\2\17\0\2\2"+
    "\2\4\2\0\12\4\1\0\1\2\17\0\3\4\1\0\10\2\2\0"+
    "\2\2\2\0\26\2\1\0\7\2\1\0\2\2\1\0\5\2\2\0"+
    "\1\4\1\2\6\4\3\0\2\4\2\0\3\4\10\0\2\4\4\0"+
    "\2\2\1\0\3\2\4\0\12\4\1\0\1\2\20\0\1\4\1\2"+
    "\1\0\6\2\3\0\3\2\1\0\4\2\3\0\2\2\1\0\1\2"+
    "\1\0\2\2\3\0\2\2\3\0\3\2\3\0\10\2\1\0\3\2"+
    "\4\0\5\4\3\0\3\4\1\0\4\4\11\0\1\4\17\0\11\4"+
    "\11\0\1\2\7\0\3\4\1\0\10\2\1\0\3\2\1\0\27\2"+
    "\1\0\12\2\1\0\5\2\4\0\7\4\1\0\3\4\1\0\4\4"+
    "\7\0\2\4\11\0\2\2\4\0\12\4\22\0\2\4\1\0\10\2"+
    "\1\0\3\2\1\0\27\2\1\0\12\2\1\0\5\2\2\0\1\4"+
    "\1\2\7\4\1\0\3\4\1\0\4\4\7\0\2\4\7\0\1\2"+
    "\1\0\2\2\4\0\12\4\22\0\2\4\1\0\10\2\1\0\3\2"+
    "\1\0\27\2\1\0\20\2\4\0\6\4\2\0\3\4\1\0\4\4"+
    "\11\0\1\4\10\0\2\2\4\0\12\4\22\0\2\4\1\0\22\2"+
    "\3\0\30\2\1\0\11\2\1\0\1\2\2\0\7\2\3\0\1\4"+
    "\4\0\6\4\1\0\1\4\1\0\10\4\22\0\2\4\15\0\60\2"+
    "\1\4\2\2\7\4\4\0\10\2\10\4\1\0\12\4\47\0\2\2"+
    "\1\0\1\2\2\0\2\2\1\0\1\2\2\0\1\2\6\0\4\2"+
    "\1\0\7\2\1\0\3\2\1\0\1\2\1\0\1\2\2\0\2\2"+
    "\1\0\4\2\1\4\2\2\6\4\1\0\2\4\1\2\2\0\5\2"+
    "\1\0\1\2\1\0\6\4\2\0\12\4\2\0\2\2\42\0\1\2"+
    "\27\0\2\4\6\0\12\4\13\0\1\4\1\0\1\4\1\0\1\4"+
    "\4\0\2\4\10\2\1\0\42\2\6\0\24\4\1\0\2\4\4\2"+
    "\4\0\10\4\1\0\44\4\11\0\1\4\71\0\42\2\1\0\5\2"+
    "\1\0\2\2\1\0\7\4\3\0\4\4\6\0\12\4\6\0\6\2"+
    "\4\4\106\0\46\2\12\0\51\2\7\0\132\2\5\0\104\2\5\0"+
    "\122\2\6\0\7\2\1\0\77\2\1\0\1\2\1\0\4\2\2\0"+
    "\7\2\1\0\1\2\1\0\4\2\2\0\47\2\1\0\1\2\1\0"+
    "\4\2\2\0\37\2\1\0\1\2\1\0\4\2\2\0\7\2\1\0"+
    "\1\2\1\0\4\2\2\0\7\2\1\0\7\2\1\0\27\2\1\0"+
    "\37\2\1\0\1\2\1\0\4\2\2\0\7\2\1\0\47\2\1\0"+
    "\23\2\16\0\11\4\56\0\125\2\14\0\u026c\2\2\0\10\2\12\0"+
    "\32\2\5\0\113\2\3\0\3\2\17\0\15\2\1\0\4\2\3\4"+
    "\13\0\22\2\3\4\13\0\22\2\2\4\14\0\15\2\1\0\3\2"+
    "\1\0\2\4\14\0\64\2\40\4\3\0\1\2\3\0\2\2\1\4"+
    "\2\0\12\4\41\0\3\4\2\0\12\4\6\0\130\2\10\0\51\2"+
    "\1\4\126\0\35\2\3\0\14\4\4\0\14\4\12\0\12\4\36\2"+
    "\2\0\5\2\u038b\0\154\2\224\0\234\2\4\0\132\2\6\0\26\2"+
    "\2\0\6\2\2\0\46\2\2\0\6\2\2\0\10\2\1\0\1\2"+
    "\1\0\1\2\1\0\1\2\1\0\37\2\2\0\65\2\1\0\7\2"+
    "\1\0\1\2\3\0\3\2\1\0\7\2\3\0\4\2\2\0\6\2"+
    "\4\0\15\2\5\0\3\2\1\0\7\2\17\0\4\4\32\0\5\4"+
    "\20\0\2\2\23\0\1\2\13\0\4\4\6\0\6\4\1\0\1\2"+
    "\15\0\1\2\40\0\22\2\36\0\15\4\4\0\1\4\3\0\6\4"+
    "\27\0\1\2\4\0\1\2\2\0\12\2\1\0\1\2\3\0\5\2"+
    "\6\0\1\2\1\0\1\2\1\0\1\2\1\0\4\2\1\0\3\2"+
    "\1\0\7\2\3\0\3\2\5\0\5\2\26\0\44\2\u0e81\0\3\2"+
    "\31\0\11\2\6\4\1\0\5\2\2\0\5\2\4\0\126\2\2\0"+
    "\2\4\2\0\3\2\1\0\137\2\5\0\50\2\4\0\136\2\21\0"+
    "\30\2\70\0\20\2\u0200\0\u19b6\2\112\0\u51a6\2\132\0\u048d\2\u0773\0"+
    "\u2ba4\2\u215c\0\u012e\2\2\0\73\2\225\0\7\2\14\0\5\2\5\0"+
    "\1\2\1\4\12\2\1\0\15\2\1\0\5\2\1\0\1\2\1\0"+
    "\2\2\1\0\2\2\1\0\154\2\41\0\u016b\2\22\0\100\2\2\0"+
    "\66\2\50\0\15\2\3\0\20\4\20\0\4\4\17\0\2\2\30\0"+
    "\3\2\31\0\1\2\6\0\5\2\1\0\207\2\2\0\1\4\4\0"+
    "\1\2\13\0\12\4\7\0\32\2\4\0\1\2\1\0\32\2\12\0"+
    "\132\2\3\0\6\2\2\0\6\2\2\0\6\2\2\0\3\2\3\0"+
    "\2\2\3\0\2\2\22\0\3\4\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\1\1\1\2\1\1\1\3\1\1"+
    "\1\4\2\5\16\1\1\3\1\4\2\1\1\6\3\7"+
    "\1\1\1\2\1\0\1\1\2\2\4\1\3\5\21\1"+
    "\1\10\10\1\1\11\3\0\1\12\1\13\1\14\1\2"+
    "\1\0\1\2\36\1\1\15\10\1\1\5\13\1\1\10"+
    "\6\1\1\10\26\1";

  private static int [] zzUnpackAction() {
    int [] result = new int[165];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\55\0\132\0\207\0\264\0\341\0\u010e\0\u013b"+
    "\0\u0168\0\u0195\0\207\0\u01c2\0\u01ef\0\u021c\0\u0249\0\u0276"+
    "\0\u02a3\0\u02d0\0\u02fd\0\u032a\0\u0357\0\u0384\0\u03b1\0\u03de"+
    "\0\u040b\0\u0438\0\u0465\0\207\0\u0492\0\u04bf\0\u04ec\0\207"+
    "\0\207\0\u0519\0\u0546\0\u0573\0\u05a0\0\u05cd\0\u05fa\0\u0627"+
    "\0\u0654\0\u0681\0\u06ae\0\u06db\0\u0708\0\207\0\u0735\0\u0762"+
    "\0\u078f\0\u07bc\0\u07e9\0\u0816\0\u0843\0\u0870\0\u089d\0\u08ca"+
    "\0\u08f7\0\u0924\0\u0951\0\u097e\0\u09ab\0\u09d8\0\u0a05\0\u0a32"+
    "\0\u0a5f\0\341\0\u0a8c\0\u0ab9\0\u0ae6\0\u0b13\0\u0b40\0\u0b6d"+
    "\0\u0b9a\0\u0bc7\0\u0bf4\0\u0c21\0\u04bf\0\u04ec\0\207\0\207"+
    "\0\u0c4e\0\u0c7b\0\u0c7b\0\u0ca8\0\u0cd5\0\u0d02\0\u0d2f\0\u0d5c"+
    "\0\u0d89\0\u0db6\0\u0de3\0\u0e10\0\u0e3d\0\u0e6a\0\u0e97\0\u0ec4"+
    "\0\u0ef1\0\u0f1e\0\u0f4b\0\u0f78\0\u0fa5\0\u0fd2\0\u0fff\0\u102c"+
    "\0\u1059\0\u1086\0\u10b3\0\u10e0\0\u110d\0\u113a\0\u1167\0\u1194"+
    "\0\u11c1\0\u11ee\0\u121b\0\u1248\0\u1275\0\u12a2\0\u12cf\0\u12fc"+
    "\0\u1329\0\u1356\0\u1383\0\341\0\u13b0\0\u13dd\0\u140a\0\u1437"+
    "\0\u1464\0\u1491\0\u14be\0\u14eb\0\u1518\0\u1545\0\u1572\0\u159f"+
    "\0\u15cc\0\u15f9\0\u1626\0\u1653\0\u1680\0\u16ad\0\u0f1e\0\u16da"+
    "\0\u1707\0\u1734\0\u1761\0\u178e\0\u17bb\0\u17e8\0\u1815\0\u1842"+
    "\0\u186f\0\u189c\0\u18c9\0\u18f6\0\u1923\0\u1950\0\u197d\0\u19aa"+
    "\0\u19d7\0\u1a04\0\u1a31\0\u1a5e\0\u1a8b";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[165];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\2\6\1\4\1\7\2\6\1\10\1\6"+
    "\1\11\1\12\1\6\1\13\1\14\2\4\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\2\6\1\25"+
    "\2\6\1\26\1\6\1\27\1\30\1\31\1\32\1\33"+
    "\2\6\1\34\2\13\1\35\2\4\51\36\1\37\1\36"+
    "\1\40\1\36\51\41\1\42\2\41\1\43\56\0\1\5"+
    "\1\0\1\44\1\0\1\5\1\0\1\44\1\0\1\44"+
    "\1\45\1\46\1\47\41\0\11\6\1\0\2\6\5\0"+
    "\25\6\7\0\1\5\1\0\1\44\1\0\1\5\1\50"+
    "\1\51\1\0\1\44\1\45\1\46\1\47\41\0\11\6"+
    "\1\0\2\6\5\0\1\52\12\6\1\53\1\54\10\6"+
    "\7\0\1\45\3\0\1\45\50\0\11\6\1\0\2\6"+
    "\5\0\12\6\1\55\12\6\6\0\16\14\1\56\1\0"+
    "\1\57\32\14\1\0\1\14\17\15\1\0\1\60\1\56"+
    "\31\15\1\0\1\15\1\0\11\6\1\0\2\6\5\0"+
    "\1\6\1\61\1\62\3\6\1\63\16\6\7\0\11\6"+
    "\1\0\2\6\5\0\4\6\1\64\20\6\7\0\11\6"+
    "\1\0\2\6\5\0\3\6\1\65\3\6\1\66\12\6"+
    "\1\67\2\6\7\0\11\6\1\0\2\6\5\0\4\6"+
    "\1\70\4\6\1\71\13\6\7\0\11\6\1\0\1\72"+
    "\1\6\5\0\25\6\7\0\11\6\1\0\2\6\5\0"+
    "\1\73\11\6\1\74\1\75\11\6\7\0\11\6\1\0"+
    "\1\76\1\6\5\0\1\77\14\6\1\100\7\6\7\0"+
    "\11\6\1\0\1\101\1\6\5\0\25\6\7\0\7\6"+
    "\1\102\1\6\1\0\2\6\5\0\2\6\1\102\3\6"+
    "\1\103\11\6\1\104\4\6\7\0\11\6\1\0\2\6"+
    "\5\0\1\53\12\6\1\105\11\6\7\0\11\6\1\0"+
    "\1\106\1\6\5\0\13\6\1\102\11\6\7\0\11\6"+
    "\1\0\1\107\1\6\5\0\25\6\7\0\11\6\1\0"+
    "\2\6\5\0\1\110\3\6\1\111\20\6\7\0\11\6"+
    "\1\0\2\6\5\0\11\6\1\112\13\6\57\0\1\113"+
    "\1\114\2\0\51\115\1\116\1\115\1\40\52\115\1\116"+
    "\1\117\1\40\1\115\52\0\1\120\4\0\2\121\2\0"+
    "\4\121\1\0\2\121\5\0\25\121\7\0\1\44\1\0"+
    "\1\44\1\0\1\44\1\0\1\44\1\0\1\44\2\0"+
    "\1\44\41\0\1\45\3\0\1\45\5\0\2\46\41\0"+
    "\1\122\3\0\1\122\7\0\1\123\40\0\1\124\1\0"+
    "\1\44\1\0\1\124\1\0\1\44\1\0\1\44\2\0"+
    "\1\44\1\123\40\0\1\50\3\0\1\50\2\0\2\50"+
    "\1\0\2\50\5\0\2\50\3\0\1\50\11\0\1\50"+
    "\14\0\1\51\1\0\1\44\1\0\1\51\1\0\1\44"+
    "\1\50\1\51\1\0\1\50\1\51\5\0\2\50\3\0"+
    "\1\50\11\0\1\50\14\0\11\6\1\0\2\6\5\0"+
    "\12\6\1\125\12\6\7\0\11\6\1\0\2\6\5\0"+
    "\4\6\1\102\20\6\7\0\11\6\1\0\2\6\5\0"+
    "\6\6\1\126\16\6\7\0\11\6\1\0\2\6\5\0"+
    "\2\6\1\127\22\6\6\0\17\14\1\0\33\14\1\0"+
    "\1\14\17\15\1\0\33\15\1\0\1\15\1\0\11\6"+
    "\1\0\2\6\5\0\2\6\1\130\22\6\7\0\11\6"+
    "\1\0\2\6\5\0\2\6\1\131\22\6\7\0\11\6"+
    "\1\0\2\6\5\0\7\6\1\102\15\6\7\0\11\6"+
    "\1\0\1\132\1\6\5\0\25\6\7\0\11\6\1\0"+
    "\2\6\5\0\1\133\3\6\1\134\20\6\7\0\11\6"+
    "\1\0\2\6\5\0\6\6\1\135\16\6\7\0\11\6"+
    "\1\0\2\6\5\0\14\6\1\136\10\6\7\0\11\6"+
    "\1\0\2\6\5\0\1\137\6\6\1\102\5\6\1\140"+
    "\7\6\7\0\11\6\1\0\2\6\5\0\4\6\1\141"+
    "\7\6\1\142\10\6\7\0\11\6\1\0\2\6\5\0"+
    "\3\6\1\143\21\6\7\0\11\6\1\0\2\6\5\0"+
    "\2\6\1\127\1\144\21\6\7\0\11\6\1\0\2\6"+
    "\5\0\1\145\24\6\7\0\11\6\1\0\2\6\5\0"+
    "\6\6\1\146\7\6\1\147\6\6\7\0\11\6\1\0"+
    "\2\6\5\0\22\6\1\102\2\6\7\0\11\6\1\0"+
    "\2\6\5\0\3\6\1\150\21\6\7\0\11\6\1\0"+
    "\2\6\5\0\12\6\1\151\12\6\7\0\11\6\1\0"+
    "\2\6\5\0\4\6\1\152\20\6\7\0\11\6\1\0"+
    "\2\6\5\0\3\6\1\153\21\6\7\0\11\6\1\0"+
    "\2\6\5\0\21\6\1\154\3\6\7\0\11\6\1\0"+
    "\2\6\5\0\12\6\1\155\12\6\7\0\7\6\1\156"+
    "\1\6\1\0\2\6\5\0\25\6\7\0\11\6\1\0"+
    "\2\6\5\0\3\6\1\157\21\6\7\0\11\6\1\0"+
    "\2\6\5\0\5\6\1\160\17\6\7\0\11\6\1\0"+
    "\2\6\5\0\14\6\1\161\10\6\7\0\11\6\1\0"+
    "\2\6\5\0\14\6\1\162\10\6\57\0\1\163\3\0"+
    "\53\114\1\40\1\114\1\0\11\121\1\0\2\121\5\0"+
    "\25\121\7\0\1\122\3\0\1\122\50\0\1\124\1\0"+
    "\1\44\1\0\1\124\1\0\1\44\1\0\1\44\2\0"+
    "\1\44\41\0\11\6\1\0\2\6\5\0\2\6\1\140"+
    "\22\6\7\0\11\6\1\0\2\6\5\0\1\164\24\6"+
    "\7\0\11\6\1\0\1\102\1\6\5\0\25\6\7\0"+
    "\11\6\1\0\2\6\5\0\3\6\1\165\21\6\7\0"+
    "\11\6\1\0\1\166\1\6\5\0\25\6\7\0\11\6"+
    "\1\0\2\6\5\0\1\167\24\6\7\0\11\6\1\0"+
    "\2\6\5\0\3\6\1\170\21\6\7\0\11\6\1\0"+
    "\2\6\5\0\14\6\1\171\10\6\7\0\11\6\1\0"+
    "\2\6\5\0\5\6\1\172\17\6\7\0\11\6\1\0"+
    "\2\6\5\0\3\6\1\144\21\6\7\0\11\6\1\0"+
    "\2\6\5\0\6\6\1\173\16\6\7\0\11\6\1\0"+
    "\1\174\1\6\5\0\25\6\7\0\11\6\1\0\2\6"+
    "\5\0\13\6\1\175\11\6\7\0\11\6\1\0\2\6"+
    "\5\0\2\6\1\102\22\6\7\0\11\6\1\0\2\6"+
    "\5\0\15\6\1\176\7\6\7\0\11\6\1\0\2\6"+
    "\5\0\5\6\1\157\17\6\7\0\11\6\1\0\2\6"+
    "\5\0\2\6\1\142\22\6\7\0\11\6\1\0\2\6"+
    "\5\0\3\6\1\177\21\6\7\0\11\6\1\0\1\200"+
    "\1\6\5\0\25\6\7\0\11\6\1\0\2\6\5\0"+
    "\14\6\1\201\10\6\7\0\11\6\1\0\2\6\5\0"+
    "\12\6\1\174\12\6\7\0\11\6\1\0\2\6\5\0"+
    "\14\6\1\202\10\6\7\0\11\6\1\0\1\203\1\6"+
    "\5\0\25\6\7\0\11\6\1\0\2\6\5\0\13\6"+
    "\1\166\11\6\7\0\11\6\1\0\2\6\5\0\1\204"+
    "\24\6\7\0\11\6\1\0\2\6\5\0\1\205\24\6"+
    "\7\0\11\6\1\0\2\6\5\0\11\6\1\102\13\6"+
    "\7\0\11\6\1\0\2\6\5\0\10\6\1\206\14\6"+
    "\7\0\11\6\1\0\2\6\5\0\16\6\1\207\6\6"+
    "\7\0\11\6\1\0\2\6\5\0\12\6\1\127\12\6"+
    "\60\0\1\40\3\0\11\6\1\0\2\6\5\0\12\6"+
    "\1\210\12\6\7\0\11\6\1\0\2\6\5\0\4\6"+
    "\1\211\20\6\7\0\11\6\1\0\2\6\5\0\4\6"+
    "\1\212\20\6\7\0\11\6\1\0\2\6\5\0\10\6"+
    "\1\102\14\6\7\0\11\6\1\0\2\6\5\0\14\6"+
    "\1\213\10\6\7\0\11\6\1\0\2\6\5\0\5\6"+
    "\1\214\17\6\7\0\11\6\1\0\2\6\5\0\11\6"+
    "\1\215\13\6\7\0\11\6\1\0\2\6\5\0\2\6"+
    "\1\216\22\6\7\0\11\6\1\0\2\6\5\0\22\6"+
    "\1\217\2\6\7\0\11\6\1\0\2\6\5\0\4\6"+
    "\1\220\20\6\7\0\11\6\1\0\2\6\5\0\14\6"+
    "\1\221\10\6\7\0\11\6\1\0\2\6\5\0\4\6"+
    "\1\222\20\6\7\0\11\6\1\0\2\6\5\0\16\6"+
    "\1\127\6\6\7\0\11\6\1\0\2\6\5\0\3\6"+
    "\1\223\21\6\7\0\11\6\1\0\2\6\5\0\4\6"+
    "\1\224\20\6\7\0\11\6\1\0\2\6\5\0\3\6"+
    "\1\112\21\6\7\0\11\6\1\0\2\6\5\0\15\6"+
    "\1\225\7\6\7\0\11\6\1\0\2\6\5\0\1\226"+
    "\24\6\7\0\11\6\1\0\2\6\5\0\1\227\24\6"+
    "\7\0\11\6\1\0\2\6\5\0\12\6\1\63\12\6"+
    "\7\0\11\6\1\0\2\6\5\0\1\230\24\6\7\0"+
    "\11\6\1\0\2\6\5\0\3\6\1\102\21\6\7\0"+
    "\11\6\1\0\2\6\5\0\5\6\1\102\17\6\7\0"+
    "\11\6\1\0\2\6\5\0\3\6\1\231\21\6\7\0"+
    "\11\6\1\0\2\6\5\0\4\6\1\232\20\6\7\0"+
    "\11\6\1\0\2\6\5\0\14\6\1\233\10\6\7\0"+
    "\11\6\1\0\2\6\5\0\6\6\1\102\16\6\7\0"+
    "\11\6\1\0\2\6\5\0\6\6\1\234\16\6\7\0"+
    "\11\6\1\0\1\235\1\6\5\0\25\6\7\0\11\6"+
    "\1\0\2\6\5\0\1\236\24\6\7\0\7\6\1\237"+
    "\1\6\1\0\2\6\5\0\25\6\7\0\11\6\1\0"+
    "\2\6\5\0\12\6\1\212\12\6\7\0\11\6\1\0"+
    "\2\6\5\0\24\6\1\127\7\0\11\6\1\0\2\6"+
    "\5\0\3\6\1\127\21\6\7\0\11\6\1\0\2\6"+
    "\5\0\5\6\1\212\17\6\7\0\7\6\1\240\1\6"+
    "\1\0\2\6\5\0\25\6\7\0\11\6\1\0\2\6"+
    "\5\0\13\6\1\241\11\6\7\0\11\6\1\0\1\242"+
    "\1\6\5\0\25\6\7\0\11\6\1\0\2\6\5\0"+
    "\15\6\1\127\7\6\7\0\11\6\1\0\2\6\5\0"+
    "\17\6\1\102\5\6\7\0\11\6\1\0\2\6\5\0"+
    "\1\6\1\162\23\6\7\0\11\6\1\0\2\6\5\0"+
    "\1\243\24\6\7\0\11\6\1\0\2\6\5\0\21\6"+
    "\1\102\3\6\7\0\11\6\1\0\2\6\5\0\6\6"+
    "\1\244\16\6\7\0\11\6\1\0\2\6\5\0\6\6"+
    "\1\212\16\6\7\0\11\6\1\0\2\6\5\0\5\6"+
    "\1\127\17\6\7\0\11\6\1\0\2\6\5\0\14\6"+
    "\1\245\10\6\7\0\11\6\1\0\2\6\5\0\23\6"+
    "\1\222\1\6\6\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6840];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\6\1\1\11\20\1\1\11\3\1\2\11"+
    "\4\1\1\0\7\1\1\11\35\1\3\0\2\11\2\1"+
    "\1\0\122\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[165];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
	/* styles */
	
	public static final byte STRING_STYLE = 0;
	public static final byte PLAIN_STYLE = 1;
	public static final byte KEYWORD_STYLE = 2;
	public static final byte OPERATOR_STYLE = 4;
	public static final byte SEPARATOR_STYLE = 5;
	public static final byte LITERAL_STYLE = 6;
	public static final byte JAVA_COMMENT_STYLE = 7;
	public static final byte JAVADOC_COMMENT_STYLE = 8;
	public static final byte JAVADOC_TAG_STYLE = 9;
	
	/* Highlighter implementation */
	
	public int getStyleCount()
	{
		return 9;
	}
	
	public byte getStartState()
	{
		return YYINITIAL+1;
	}
	
	public byte getCurrentState()
	{
		return (byte) (yystate()+1);
	}
	
	public void setState(byte newState)
	{
		yybegin(newState-1);
	}
	
	public byte getNextToken()
	throws IOException
	{
		return (byte) yylex();
	}
	
	public int getTokenLength()
	{
		return yylength();
	}
	
	public void setReader(Reader r)
	{
		this.zzReader = r;
	}

	public NapileHighlighter()
	{
	}


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public NapileHighlighter(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public NapileHighlighter(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1772) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 6: 
          { return JAVA_COMMENT_STYLE;
          }
        case 14: break;
        case 1: 
          { return PLAIN_STYLE;
          }
        case 15: break;
        case 8: 
          { return KEYWORD_STYLE;
          }
        case 16: break;
        case 4: 
          { return OPERATOR_STYLE;
          }
        case 17: break;
        case 2: 
          { return LITERAL_STYLE;
          }
        case 18: break;
        case 5: 
          { return STRING_STYLE;
          }
        case 19: break;
        case 11: 
          { yybegin(YYINITIAL); return JAVADOC_COMMENT_STYLE;
          }
        case 20: break;
        case 10: 
          { yybegin(YYINITIAL); return JAVA_COMMENT_STYLE;
          }
        case 21: break;
        case 3: 
          { return SEPARATOR_STYLE;
          }
        case 22: break;
        case 9: 
          { yybegin(IN_COMMENT);  return JAVA_COMMENT_STYLE;
          }
        case 23: break;
        case 13: 
          { yybegin(IN_JAVA_DOC_COMMENT); return JAVADOC_COMMENT_STYLE;
          }
        case 24: break;
        case 12: 
          { return JAVADOC_TAG_STYLE;
          }
        case 25: break;
        case 7: 
          { return JAVADOC_COMMENT_STYLE;
          }
        case 26: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return YYEOF;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
